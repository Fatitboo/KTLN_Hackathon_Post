import { ApiClient, requests } from 'recombee-api-client';
import arr from './csvjson_user.js';
const client = new ApiClient(
  'hackadev-dev',
  'sm5J6wstSiT380OU1PC65CKKbKabs6fXB1asBYYKqZ6q2q6pOEgDmSZaKmGanFG4',
  { region: 'ap-se' },
);

function stringToArray(str: string): string[] {
  // Replace single quotes with double quotes and remove surrounding brackets
  const formattedStr = str.replace(/'/g, '"').replace(/^\[|\]$/g, '');

  // Parse the formatted string into an array
  return JSON.parse(`[${formattedStr}]`);
}

const arr_user = [
  'ada',
  'adobe',
  'agile',
  'alice',
  'amazon',
  'analysis',
  'angular',
  'ansible',
  'apache',
  'api',
  'architecture logicielle',
  'artificial intelligence',
  'asp.net',
  'assembly',
  'aurora',
  'autocad',
  'balancing',
  'bash',
  'basic',
  'be',
  'beego',
  'bi',
  'bitbucket',
  'block',
  'building',
  'c',
  'c#',
  'c++',
  'c/c++',
  'cassandra',
  'chapel',
  'cisco',
  'clojure',
  'cloud',
  'cobol',
  'codeigniter',
  'coldfusion',
  'computer vision',
  'computervision',
  'computing',
  'concretecms',
  'couchdb',
  'csharpe',
  'css',
  'd3.js',
  'dart',
  'data',
  'data science',
  'database',
  'db2',
  'deep learning',
  'development',
  'devops',
  'dhcp',
  'django',
  'dns',
  'docker',
  'dom',
  'dylan',
  'dynamodb',
  'eiffel',
  'elm',
  'embedded',
  'engine',
  'entity',
  'erlang',
  'euphoria',
  'express',
  'express.js',
  'expressjs',
  'f#',
  'fantom',
  'fastapi',
  'firebase',
  'flask',
  'flutter',
  'front-end',
  'gimp',
  'gin',
  'git',
  'github',
  'gitlab',
  'go',
  'google',
  'gradle',
  'groovy',
  'hack',
  'hadoop',
  'hana',
  'haskell',
  'hbase',
  'hibernate',
  'hopscotch',
  'html',
  'ia',
  'iaas',
  'idl',
  'illustrator',
  'in-memory',
  'indesign',
  'intelligence artificielle',
  'interfaces',
  'intégration continue',
  'ios',
  'ios/macos',
  'iot',
  'iot.js',
  'j2ee',
  'java',
  'javafx',
  'javascript',
  'jboss',
  'jenkins',
  'jetty',
  'jpa',
  'jquery',
  'js',
  'json',
  'julia',
  'juniper',
  'junit',
  'kanban',
  'kdb+/q',
  'kitura',
  'kotlin',
  'kubernetes',
  'labview',
  'laravel',
  'linux',
  'lisp',
  'load',
  'logo',
  'lstm',
  'lua',
  'mac',
  'machine',
  'machine learning',
  'manipulation',
  'mapping',
  'mariadb',
  'matlab',
  'matplotlib',
  'maven',
  'mel',
  'memcached',
  'metasploit',
  'microsoft',
  'mongo db',
  'mongodb',
  'mql4/mql5',
  'mumps',
  'mysql',
  'ner',
  'nest.js',
  'next.js',
  'nexus',
  'nginx',
  'nim',
  'nlp',
  'nmap',
  'node',
  'node.js',
  'nodejs',
  'numpy',
  'oberon',
  'object-relational',
  'objective-c',
  'objective-j',
  'on',
  'open source',
  'opencl',
  'opencv',
  'oracle',
  'os',
  'paas',
  'pandas',
  'pascal',
  'perl',
  'photoshop',
  'php',
  'pl/i',
  'pl/sql',
  'postgresql',
  'postman',
  'power',
  'powershell',
  'prestashop',
  'prolog',
  'protocols',
  'pyramid',
  'python',
  'pytorch',
  'query',
  'r',
  'racket',
  'rails',
  'rapira',
  'react',
  'react js',
  'react native',
  'react.js',
  'reactjs',
  'realm',
  'redis',
  'rethinkdb',
  'revue de code',
  'rexx',
  'rhino',
  'riak',
  'rpg',
  'ruby',
  'runtime',
  'rust',
  'saas',
  'sap',
  'sas',
  'sbl',
  'scala',
  'scheme',
  'scratch',
  'scripting',
  'scrum',
  'seaborn',
  'selenium',
  'servlet',
  'shell',
  'sinatra',
  'smalltalk',
  'smart',
  'solidity',
  'solidworks',
  'spark',
  'spring',
  'spring boot',
  'springboot',
  'sql',
  'sqlite',
  'struts',
  'swift',
  'swiftui',
  'symfony',
  "system d'exploitation",
  'systems',
  'tableau',
  'tailwind',
  'tcl',
  'tcp/ip',
  'tensorflow',
  'terraform',
  'test automatisé',
  'testng',
  'tomcat',
  'turing',
  'typescript',
  'ui',
  'uikit',
  'uml',
  'unity',
  'unix',
  'unreal',
  'unrealscript',
  'used',
  'user',
  'vala',
  'verilog',
  'vhdl',
  'visual',
  'voltdb',
  'vpn',
  'vue.js',
  'web',
  'win32',
  'windows',
  'wireshark',
  'wolfram',
  'wordpress',
  'x86',
  'xamarin',
  'xml',
  'xojo',
  'xquery',
  'xsl',
];
function getRandomSkills(): string[] {
  const numSkills = Math.floor(Math.random() * 10) + 1; // Random number between 1 and 10
  const shuffled = arr_user.sort(() => 0.5 - Math.random()); // Shuffle the skills array
  return shuffled.slice(0, numSkills); // Get the first numSkills from the shuffled array
}
async function uploadItem() {
  const req = [];
  arr.forEach((item) => {
    req.push(
      new requests.SetUserValues(
        item.user_id,
        {
          username: item.username,
          themes: stringToArray(item.themes),
          skills: getRandomSkills(),
        },
        { cascadeCreate: true },
      ),
    );
  });

  await client
    .send(new requests.Batch(req))
    .then((result) => {
      console.log(result);
    })
    .catch((error) => {
      console.error(error);
    });
}

uploadItem();
